// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorcycleManager.Infrastructure.Persistence;

#nullable disable

namespace MotorcycleManager.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250710171049_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Camera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Displacement")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .HasColumnType("longtext");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Sighting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CameraId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SightingTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("MotorcycleId");

                    b.ToTable("Sightings");
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Camera", b =>
                {
                    b.OwnsOne("MotorcycleManager.Domain.ValueObjects.Address", "Location", b1 =>
                        {
                            b1.Property<Guid>("CameraId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("LocationCity");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("varchar(300)")
                                .HasColumnName("LocationStreet");

                            b1.HasKey("CameraId");

                            b1.ToTable("Cameras");

                            b1.WithOwner()
                                .HasForeignKey("CameraId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Motorcycle", b =>
                {
                    b.HasOne("MotorcycleManager.Domain.Entities.Brand", "Brand")
                        .WithMany("Motorcycles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Sighting", b =>
                {
                    b.HasOne("MotorcycleManager.Domain.Entities.Camera", "Camera")
                        .WithMany("Sightings")
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorcycleManager.Domain.Entities.Motorcycle", "Motorcycle")
                        .WithMany("Sightings")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camera");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Motorcycles");
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Camera", b =>
                {
                    b.Navigation("Sightings");
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Entities.Motorcycle", b =>
                {
                    b.Navigation("Sightings");
                });
#pragma warning restore 612, 618
        }
    }
}
